import { useState, useRef, useEffect } from "react";
import store from "../store";
import { refreshTokenIfNeeded } from "../services/refreshToken";

interface Message {
    id: number;
    conversation_id: number;
    sender: number;
    text: string;
    created_at: string;
}

interface Invitation {
    conversation: {
        id: number;
        name: string;
    };
}

export function useWebSocket(roomId: number) {

    const [isConnected, setIsConnected] = useState(false);
    const [messages, setMessages] = useState<Message[]>([]);
    const [invitations, setInvitations] = useState<Invitation[]>([]);
    const [hasMoreMessages, setHasMoreMessages] = useState(true); // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const isLoadingMore = useRef(false); // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    const socketRef = useRef<WebSocket | null>(null);


    useEffect(() => {

    }, [])

    const connectWebSocket = async () => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
            console.log("WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
            return;
        }

        let token = store.getState().auth.access;

        if (!token) {
            console.log("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
            token = await refreshTokenIfNeeded();
            if (!token) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");
                return;
            }
        }
        socketRef.current = new WebSocket(`ws://localhost:8000/ws/messages/${roomId}/?token=${token}`);

        socketRef.current.onopen = () => {
            console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
            setIsConnected(true);
        };


        socketRef.current.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

            if (data.action === "initial_messages") {
                console.log("üìú –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", data.messages);
                setMessages((prev) => [...data.messages, ...prev]);          
            } else if (data.action === "new_message") {
                console.log("üÜï –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data.message);
                setMessages((prev) => [...prev, data.message]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ state
            } else if (data.action === "invitation") {
                console.log("üì© –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É:", data.conversation);
                setInvitations((prev) => [...prev, data]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ state
            } else if (data.action === "messages_read") { 
                console.log(`üëÄ –°–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ ${data.conversation_id} –ø—Ä–æ—á–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.read_by}`);
            } else if (data.action === "load_more_messages") {
                if (data.messages.length === 0) {
                    setHasMoreMessages(false);
                } else {
                    console.log("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", data.messages);
                    setMessages((prev) => [...data.messages.reverse(), ...prev]);  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                }
            isLoadingMore.current = false;
            }
        };

        socketRef.current.onerror = (error) => {
            console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket: ", error);
        };

        socketRef.current.onclose = async (event) => {
            console.log("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω", event.code);
            setIsConnected(false);
            socketRef.current = null;

            if (event.code === 1006 || event.code === 4001) {
                console.log("üîÑ –¢–æ–∫–µ–Ω –º–æ–≥ –∏—Å—Ç–µ—á—å, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
                const newToken = await refreshTokenIfNeeded();

                if (newToken) {
                    console.log("‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...");
                    setTimeout(connectWebSocket, 1000);
                } else {
                    console.log("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
                }
            }
        };
    };

    const sendMessage = (text: string) => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
            const messageData = {
                action: "send_message",
                conversation_id: roomId,
                text: text,
            };
            socketRef.current.send(JSON.stringify(messageData));
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", messageData);
        } else {
            console.error("‚õî WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
        }
    };

    const inviteUser = (userIds: number[]) => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
            const inviteData = {
                action: "invite_user",
                conversation_id: roomId,
                user_ids: userIds,
            };
            socketRef.current.send(JSON.stringify(inviteData));
            console.log("üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", inviteData);
        } else {
            console.error("‚õî WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
        }
    };

    const disconnectWebSocket = () => {
        if (socketRef.current) {
            socketRef.current.close();
            socketRef.current = null;
            setIsConnected(false);
            console.log("‚ùå WebSocket –≤—Ä—É—á–Ω—É—é –æ—Ç–∫–ª—é—á–µ–Ω");
        }
    };

    const markMessagesAsRead = () => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
            const readData = {
                action: "mark_as_read",
                conversation_id: roomId,
            };
            socketRef.current.send(JSON.stringify(readData));
            console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:", readData);
        } else {
            console.error("‚õî WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
        }
    };

    const loadMoreMessages = () => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN && hasMoreMessages && !isLoadingMore.current) {
            isLoadingMore.current = true;
            const lastMessageId = messages[0]?.id;
            console.log(messages)
            if (!lastMessageId) return;

            const requestData = {
                action: "load_more_messages",
                last_message_id: lastMessageId,
            };
            socketRef.current.send(JSON.stringify(requestData));
            console.log("‚¨ÜÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", requestData);
        } else {
            console.warn("‚õî WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
        }
    };

    useEffect(() => {
        return () => {
            disconnectWebSocket();
        };
    }, []);

    return { 
        isConnected, 
        connectWebSocket, 
        sendMessage, 
        inviteUser, 
        disconnectWebSocket, 
        messages, 
        invitations,
        markMessagesAsRead,
        loadMoreMessages,
        hasMoreMessages
    };
}